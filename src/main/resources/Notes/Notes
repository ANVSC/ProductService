https://github.com/shabbirdwd53?tab=repositories
Order of starting applications : Service-Registry -> Config-Server -> Product Service -> Order Service
-> Payment service -> Cloud Gateway
Steps :
1. Creating a product service &order service and giving them names and making them to run in different ports
2. Creating a service registry and adding configuration in it (comments added ) such that any service can come and connect to me.
    #Eureka server configuration
    eureka:
      instance:
        hostname: localhost # we are going to run eureka server on localhost
      client:
        register-with-eureka: false #WE dont want this application(service-registry to register with itself as it is a server not a client
        fetch-registry: false # This will tell that this is a server and other clients can come and register with this. So we are setting it to false so that it will not register itself

3. Adding eureka configuration product service and order service so that they will connect to eurka server.
    eureka:
      instance:
        prefer-ip-address: true
      client:
        fetch-registry: true
        register-with-eureka: true
        service-url:
          defaultZone: ${EUREKA_SERVER_ADRESS:http://localhost:8761/eureka}

4. So there are eureka configuration in both product and order services.
It is the same configuration. So we need to avoid it.
        a. We add a new cofiguration in some where like github which is going to add as centralized repository.
        b. Now we can pass or generate this configuration from github using a config server.
        c This config server will get all the configurations from the centralized repository (here it is github)
        and can pass all the configuration to all the services registered to this service registry.
        d. Here in our services there are only few lines of cofiguration is present, but in real-time there can be
        hundered's or thousand's of lines of code will be present.
        In such cases this config server and centralized repository will play a huge role
        as we cannot go to each of the service and write this configuration as there can be 100's of services.
5. create a springboot project for confg server with the dependencies Config Server and Eureka Discovery Client
6. Open up the project and then add @EnableConfigServer to the main application
7. Create a new github repo to store the config. Here in my ANVSC github I am using a name "spring-app-config"
8. Then add that uri to the config-server application.yaml as show below and add alone-on-start as true
such that everytime configserver application gets started , this repo will be cloned.
spring:
  application:
    name: CONFIG-SERVER
  cloud:
    config:
      server:
        git:
          uri: https://github.com/ANVSC/spring-app-config.git
          clone-on-start: true

9. Now add the eureka server client configuration to config-server. (take it from order service or productservice)
10. Go to "spring-app-config" in githuib, create a new file with a name "application.yaml" and add this eureka server client
 configuration in that application.yaml file.

11. Till now, we have created order and product services. Also created service-registry which is used as server. Also
we have added eureka client configuration in order and product service to connect to the server.
We wanted to avoid adding this server configuration in both product and order service as it is reductant. To do so we have
created a repository in github and added all the configurations in that repository namely "spring-app-config".
After that we created a config-server which will fetch the configuration from the git-repo and adds it to the order and product service.
In creating a config-server we have enabled @EnableConfigServer and added in yaml file to fetch config details from that repo.
Now we have to make order and product service to use this ConfigServer to fetch the configuration. To do so,
we have to implement config-client in both the services. This client will helps order and product services to connect to a
spring-cloud configServer to fetch application config.

12. Add the dependency Config Client from spring initializer

13. If we order something using order service we have to go to  product service and then reduce the quantity of product there.
To do so we have to create a reduceQuantity API in productService and then whenever a order is being placed by calling
placeOrder API from order service, we have to call internally product service and then update the remaining products.
So to call the product service from order service instead of RestTemplate we will be using Feign Client.

Feign Client is a rest Client which allows to use the API calls using declarative function.
Generally we will be calling a product service from order service like this : PUT->http://localhost:8080/product/1?...
But instead of localhost:8080 we can say that PRODUCT-SERVICE as we have mentioned in service-registry.
Therefore it becomes PUT-> http://PRODUCT-SERVICE/product/1.... so here we will not be bothered about which port number
we are using etc and all as service registry will take care of them all.

14. Now in Feign Client We have to declare an interface in order service with the name as ProductService which will be having
method which will have API details to be called and that interfcae will be annotated with @FeignClient. This annotation will
take care of the which url to be called and all.
Dependecies to be added : OpenFeign.
To Use Feign client we have to annotate order-service-application with @EnableFeignClients

15. Generally in real time projects, we will have common-projects to reduce the redundancy.
Like here we are going to decalre productservice feignclient configuration in order service in external
package. Or may be we might use orderservice feignclient configuration in product service as well. Generally,
all these configurations will be present in common-configrations, but here we will be using external folder to do so.
If there is a requirement in product service to call order service, then we can have other external folder in product service
as well.

Feign Client confiiguration :

    @FeignClient(name = "PRODUCT-SERVICE/product")
    public interface ProductService {
        @PutMapping("/reduceQuantity/{id}")
        ResponseEntity<Void> reduceQuantity(@PathVariable("id") long productId , @RequestParam long quantity);
    }
a. Here @FeignClient is decalring that this is feignclient
b. name= "PRODUCT-SERVICE/product" says that to which microservice it has to go. Here it is  PRODUCT-SERVICE(it is name given
to product-service in application.yaml to represent the service instead of using localhost.)
c. Inside product-service microservice to which controller it has to go. It is defined by /product in the name.
d. Inside that controller, to which method it has to go, is given my this reduceQuantity method with that @Putmapping.
    (Just copied method declaration from productserviceController)

16. Now we got the configuration to call the API from product service, so just call the product service API in OrderServiceImpl
            productService.reduceQuantity(orderRequest.getProductId(),orderRequest.getQuantity());

This will work for positive scenarios. But if there is any exception happened in the product service and you will return
productServiceCustomException kept in the object of ErrorResponse. This will make order-service throw 500 Internal error in
order-service API as response.
Whenever we have ErrorResponse as response from product-service,Somehow we have to make the order-service understand that
we got error response from product-service, so we have to stop further execution of code and then have to return Another
ErrorResponse from order-service to be displayed in postman.

17. To do so, we have to implement CustomErrorDecoder implements ErrorDecoder from eign.codec.ErrorDecoder as follows. (go-to
point 18 to understand the following code)

@Log4j2
public class CustomErrorDecoder implements ErrorDecoder {
    @Override
    public Exception decode(String s, Response response) {
        ObjectMapper objectMapper = new ObjectMapper();
        log.info("::{}",response.request().url());
        log.info("::{}",response.request().headers());
        try {
            ErrorResponse  errorResponse = objectMapper.readValue(response.body().asInputStream(),ErrorResponse.class);
            return new CustomException(errorResponse.getErrorMessage(),errorResponse.getErrorCode(),response.status());
        } catch (IOException e) {
            throw new CustomException("INTERNAL_SERVER_ERROR","INTERNAL_SERVER_ERROR",500);
        }
    }
}

18. Firstly create CustomException (used to throw in order-service whenever there is any exception) , RestResponseEntityExceptionHAndler
(to be used as controller advice), ErrorResponse.class(Used to send response to user whenever there is any exception)
    a. Read the response from product-service using objectMapper and then store it in errorResponse object.
    b. Using this errorResponseObject build CustomExecption and return as a part of decode method.
    c. Write a configuration class as follows.
        @Configuration
        public class FeignConfig {
            @Bean
            ErrorDecoder errorDecoder(){
                return new CustomErrorDecoder();
            }
        }
    d. Here is the full flow.
    This configuration class will tell the orderservice that this CustomErrorDecoder.class is the class that you have to look
    to decode the error if there is any error coming from the calling api. This CustomErrorDecoder implements ErrorDecoder
    which is having decode method which will return CustomException.
    e. When we have customException , controllerAdvice picks it up and returns the ErrorResponse.

(Exception Handling flow : If there is exception, we throw CustomException , that CustomExeption will be picked by class having
controlleradvice and then that controller advice will generate ErrorResponse and returns to the user.)

19. Zipkin and Sleuth : Now if we see this flow, a request came in or order service and order service took help of config-server to get the
eureka server and using eureka server it called product service and a response came back to product service. Now if you trace
the logs, we have to go through each service to observe the logs. And it would be difficult to identify which log is before and
which log is after, if we are lucky enough there can be time printed but yet it is difficult.
So it would be difficult to trace complete path a request went and response came back. To handle these scenarios, we are
going to use "Zipkin and Sleuth " Log tracing tools to handle those kind of tracing.

20. Zipkin and Sleuth : We will create a zipkin server and that zipkin server will maintain the logs. So whenever all those logs
happen , all those logs will be distributed tiddly trace throughout all those different microservices and we will be able to
know what particular log happened at what particular time.

21. ZipKin server :
    Strat Docker desktop and then run below command in command prompt
    docker run -d -p 9411:9411 openzipkin/zipkin
    This command will make zipkin server up and running, and you will see an image in docker
    Now, open browser and go to http://localhost:9411/zipkin/
    Now we have to add our applications to this zipkins server so that all the logs will be in-line.
22. Firstly add below two dependencies for zipkin and sleuth in product and order service.
        <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>

		<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>


23. Create PaymentService and add doPaymentAPI. Add FeignClient in Orderservice and then call paymentService's
doPayment API while placing the order.

24. Rest Template : Implementing follwing APIs to fetch respective details.
    1. getOrderdetails - Fetching order details using order id from order service.
    Inside this getOrderdetails, We want product details as well. We are already having an API in product service
    which takes productId as parameter and gives us product details.
    In order table we are having a column of product Id, so we can use it and get details of that product wrt
    the given order.
    GetOrderDetails API will now return orderdetails along with product details.

25.  Rest Template :  Now to call this getProductAPI from order-service we are going to use rest template.

26. API GateWay:
Till now what we have done is we are having 3 services and we are calling them based on the requirement. i.e.,
we will call order service if we need details of order and we will call payment service if we need payment details
etc. based on its service name and port information.

Lets assume all our 3 applications are present in a server. And different requests will be coming from different
applications like mobile app, or web app etc. And to every one we cannot provide our server details and port info to
access our application. All these requests are coming from public network. All these requests should be protected
from public network to private network(where applications are deployed).

So whatever requests are coming from these clients , cannot directly come to our order-service or to our product-service
or to our payment-service. It have to be come by a service and that service is responsible to routing these requests
to respective services, authenticating those requests, authorizing those requests etc.

So there have to be only one single point of contact such that all the requests have to be intracted to and
from that poc all the internal services are invoked.
And that SPOC is called API Gateway.

All the clients have to send requests to API gateway and API gateway will identify to  which service it have to send
and then it will send that request to its internal services.

And internally if order-service needs data of a payment-service, it can call directly payment-service using eureka server
and there is no need of going through API gateway. This api gateway is only for handling external client requests.

To create that project  we use spring cloud, , dependency requried - clould bootstrap and gateway, webFLux (Reactive ) ,
 zipkin and SLuth, Lombok, Eureka Discovery Client, Springboot Actuator, Config client.

27. in the application yml file of this Gateway service, we have to give port number, and make it register
with configserver and then we have let it know that if a request comes having /order/** then route it to
ORDER-SERVICE, if a request comes having /product/** then route it to  PRODUCT-SERVICE.
Here is the configuration of it :
server:
  port: 9090

spring:
  application:
    name: API-GATEWAY
  config:
    import: configserver:http://localhost:9296
#Adding configuration for routing requests to different services
  cloud:
    gateway:
      routes:
        - id : ORDER-SERVICE
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order/**

        - id: PRODUCT-SERVICE
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/product/**

        - id: PAYMENT-SERVICE
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/payment/**


28. Now instead of hitting localhost:8082/order/5 we can hit localhost:9090/order/5. In this way
infornt of every service we are having a API gateway.

29. CIRCUIT BREAKER : Lets  say we are having a current circuit. So if the circuit is closed then current flows
and if circuit is open the current will stop.
Based on same scenario, we we will implementing circuit breaker as well.

Suppose, client is calling   API gateway to get order information, we are going to call orderservice and from order service we will be calling product
service and payment service.
Lets say, we are having order service is not working or product or payment service is not working.Then this
circuit breaker will come to picture.

Lets say we are having order service is down. Now we are having requests coming to API gateway and gateway is sending
all the requests blindly to order service without checking orderservice is up and running or not.
This will be waste of resources as order service is down, and API gateway will keep on hitting the orderservice.

So what we can do is, we can have a mechanism where it can constantly check if the order service is
up and running or not and if it is failing then lets not send all the requests to order service, lets wait for
sometime to start that particular service up and when that service is up, then start sending requests to that service.

We are going to use Resilience Forge Library. This library will allows us to implement circuit breaker in our
architecture.

How circuit breaker works?
circuit breaker will have different states. And depending up on those states, it will handle all those scenarios.

Lets say, I have to call orderservice from API gateway. Now we have to implement circuit breaker in API gateway.
and that circuit breaker will handle all those scenarios for order service.
Now, as we are calling product service from orderservice, we will implement circuit breaker for product service
in order service.

It will have 3 states, 1. Closed state 2.Open State 3.Half Open State. All these are connected in triangle.
If entire circuit is closed, all the requests will be passed.
If order service is down, then if a request comes, it will fail, 2nd request comes it will fail .....
Now we can specify a number in the circuit breaker that if there are those number of requests failed, then
circuit breaker will change the its state from closed to open and requests won't go from API gateway to orderservice.

Now how much time the circuit have to be in open state ? For this thing we have to specify time interval.
So after that time, circuit changes its state from open to Half-open. At this state, half of requests will pass
through and half will be blocked.

Now out of those half of requests which are passed, lets say we are haivng 5 requests passed. We have to know
what is the success rate. Lets say we are having 60 to 70 percent of those passed requests are successful.
then we can change state from half-open to closed state. Else we will go back to open state.

I.e., if success rate is above the thurshold is change state to closed, else change to open.

And whenever circuit breaker is open, we can call a fallback method which will return response back with
specfic data.
In the fallback method depending up onsituation we can return the response.
Eg: if we are doing a payment and it failed, then we can spcify that the sevice is down, and will ask to try again later.
If the service is retunring data by calling a database and now that service is down, we can try fetching data
from caching etc.

************** NOTE : We are not implementing circuit breaker , moving on to spring security

Spring Security + Auth2 Authentication:

30. Previously when there are monolithic applications, we used to create a session and for that particular interval
in that session we will allow them to perform those operations.
Now we are developing microservices, it is not possible to create session for each and every microservices.
So what we do is we go to Auth2 authentication.

There has to be a Authentication Server which takes a request containing credentials, and this Authentication server
returns the Auth-Code. This Auth-Code will have  information like the credentials are valid , it will also have
the info of all the information of Authorization, like if we have multiple roles available, then all the roles
info will be available.

This Auth-code will be the JWT token (JSON Web Token), this JWT will have 3 things.
a. Header b. Body c Signature
This JWT token will be Unique.
This Auth-code will have a code and duration of which this code is valid.
After that we have to generate a new code and we have to be passed that new code.
After generating a code, it is the responsibility of the client to send that code as a part of request.
Now when that request reaches our services, services will try to decode that JWT and makes sure that this
request is valid and checkes authorizations and then will process the required information.
Speaking of Authorization, in the JWT there will be role of user. We are having Order-service and now CUSTOMER
is the role which can access all the services of order-service. So if the role present in the Auth-code is
CUSTOMER , then only order-service will authorize that request to access order-service services.

This kind of autorization in order--service is done using Auth2 using spring security.
And coming to Authentication server, we will use OKTA library, a 3rd party Library.

Complete flow :

Outh2 will call send a request on the behalf of user by generating the code.

Example : Lets say we are trying to login to Linkedin. Now we want to implement OAuth2. What we will do is we will go
to linkedin login page and then click on "Sign-in with google". And it will allows us to login to linkedin
and access services of linkedin.
This "Sign-in with google" is Oauth2. So once we click it, this oauth2 will go to google , authenticate it  and
generate a auth-code,, comes back and along with that code, it will go to linkedin , logs in and provides
linkedin services as long as that code is valid.


Now come to code of these services  :

1. We will create a login API in our API gateway. this login API will go to OKTA and checks if there is
this user present in OKTA and if yes then it will return all those permissions wrapped together as a JWT token
back to API gateway.
2. Now API gateway has that JWT token.
3. Now that token will be send back to those clients.
4. Clients are responsible to send that token in headers along with other requests to services.
5. Lets say we are trying to hit order-service. Now in that order-service, order-service will decode that JWT
token and gets all the information in it. Based on the permissions/Scopes in that JWT token,
it will process the request.

6. Lets say we are calling payment-service, this payment service cannot be called directly. Whenever we placed
an order only , payment service is called. So, this payment service can only be called using internal scope.
It cannot be called with other scope.If it is Internal request alone it will process that request.

So depending up on the scope present in JWT token, requests gets processed.












******************************************************************
Exception Handling :
1. First Create a custom Exception which we are going to throw when there is any exception.
@Data
public class ProductServiceCustomException extends RuntimeException{
    private String errorCode;
    public ProductServiceCustomException (String message, String errorCode)
    {
        super(message);
        this.errorCode = errorCode;
    }
}

2. Add a Response class , and this is the class which we are going to send as response whenever there are any exception.
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ErrorResponse {
    private String errorMessage;
    private String errorCode;
}

3.
    a. Inorder to return a errorResonse whenever there are any exception occurs or
    Inorder to return a errorResonse whenever we throw an exception, we need a controller advice
    which will send response back and this controller advice class extends ResponseEntityExceptionHandler..
    b. Add a method in controller advice which can handle exception which occured.
    c. Here our exception is ProductServiceCustomException, so anotate that method with
     @ExceptionHandler(ProductServiceCustomException.class)

     @ControllerAdvice
     public class RestResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {
         @ExceptionHandler(ProductServiceCustomException.class)
         public ResponseEntity<ErrorResponse> handleProductServiceException (ProductServiceCustomException exception){
             return new ResponseEntity<>(new ErrorResponse().builder()
                     .errorCode(exception.getErrorCode())
                     .errorMessage(exception.getMessage())
                     .build(), HttpStatus.NOT_FOUND );
         }
     }

4. Now throw this exception whereever you want it.
   @Override
    public ProductResponse getProductById(long productId) {
        log.info("Get the product for productID");
        Product product = productRepository.findById(productId)
                .orElseThrow(()-> new ProductServiceCustomException("Product with the given Id is not found","PRODUCT_NOT_FOUND"));
        ProductResponse productResponse = new ProductResponse();
        copyProperties(product,productResponse);
        return productResponse;
    }



*****************************************************************************************************
Till